input {

  beats {
    port => 5044
  }
}

filter {
  mutate {
    split => ["[log][file][path]", "/"]
    add_field => { "job_name" => "%{[log][file][path][5]}" }
    add_field => { "build_num" => "%{[log][file][path][7]}" }
  }

if [log_source] == "infrared_ansible" {

  grok {
    match => {"message" => ["(?m)TASK \[(?<task_name>.*?)\].*DFG-(?<DFG>\w+).*-(?<osp_release>[1-2]\d(\.\d)?)(_|-).*(expception|The error was: )(?<build_failure>.*)NO", "(?m)TASK \[(?<task_name>.*?)\].*(expception|The error was: )(?<build_failure>.*)NO", "TASK \[(?<task_name>.*?)\].*DFG-(?<DFG>\w+).*-(?<osp_release>[1-2]\d(\.\d)?)(_|-).*", "TASK \[(?<task_name>.*?)\].*-(?<osp_release>[1-2]\d(\.\d)?)(_|-).*"]}
  }
}

if [log_source] == "jenkins_console" {

grok {
    match => {"message" => ["[Ee]rror:(?<build_failure>.*)", "Started by (?<build_trigger>\b\w+\b)|Finished: (?<build_result>\b\w+\b)", "infrared.*topology-nodes (?<topology>(\b\w+\b:\d,)+\b\w+\b:\d).*host-address (?<node_name>(\b\w+\b\.)+\b\w+\b).*(?<guest_image>rhel-.*).qcow2", "infrared.*storage-backend (?<storage_backend>\b\w+\b).*overcloud-ssl (?<overcloud_ssl>\b\w+\b).*network-backend (?<network_backend>\b\w+\b).*network-protocol (?<ip_version>\b\w+\b).*network-bgpvpn (?<bgpvpn>\b\w+\b).*network-dvr (?<dvr>\b\w+\b).*network-l2gw (?<l2gw>\b\w+\b).*", "core_puddle=(?<core_puddle>\d+\-\d+\-\d+\.\d+)"]}
  }
 }

if [log_source] == "infrared_yaml" {

grok {
    match => {"message" => ["protocol(?<ip_version>ipv.*)"]}
}

}

}

## Add your filters / logstash plugins configuration here

output {
  stdout {
    codec=> rubydebug
  }
  elasticsearch {
    hosts => "elasticsearch:9200"
  }
}
